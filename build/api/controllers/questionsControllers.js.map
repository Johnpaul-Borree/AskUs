{"version":3,"sources":["../../../src/api/controllers/questionsControllers.js"],"names":["validateQuestion","question","schema","questionBy","Joi","string","min","required","AddedOn","isoDate","Topics","array","items","validate","validateAnswer","answeredBy","Answer","exports","getAllQuestions","req","res","status","send","questions","getQuestionById","find","g","id","parseInt","params","questionId","createQuestion","body","error","details","message","length","answers","answersGiven","push","answerQuestion","answer"],"mappings":";;AAAA;;;;AAEA;;;;AAEA,SAASA,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,MAAMC,SAAS;AACbC,gBAAYC,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,QAApB,EADC;AAEbC,aAASJ,cAAIC,MAAJ,GAAaI,OAAb,GAAuBF,QAAvB,EAFI;AAGbN,cAAUG,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,QAApB,EAHG;AAIbG,YAAQN,cAAIO,KAAJ,GAAYC,KAAZ,CAAkBR,cAAIC,MAAJ,GAAaE,QAAb,EAAlB;AAJK,GAAf;;AAOA,SAAOH,cAAIS,QAAJ,CAAaZ,QAAb,EAAuBC,MAAvB,CAAP;AACD;;AAED,SAASY,cAAT,CAAwBb,QAAxB,EAAkC;AAChC,MAAMC,SAAS;AACba,gBAAYX,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,QAApB,EADC;AAEbC,aAASJ,cAAIC,MAAJ,GAAaI,OAAb,GAAuBF,QAAvB,EAFI;AAGbS,YAAQZ,cAAIC,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,QAApB;AAHK,GAAf;;AAMA,SAAOH,cAAIS,QAAJ,CAAaZ,QAAb,EAAuBC,MAAvB,CAAP;AACD;;AAGDe,QAAQC,eAAR,GAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,0BAArB;AACD,CAFD;;AAIAN,QAAQO,eAAR,GAA0B,UAACL,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAMnB,WAAWsB,2BAAUE,IAAV,CAAe;AAAA,WAAKC,EAAEC,EAAF,KAASC,SAAST,IAAIU,MAAJ,CAAWC,UAApB,CAAd;AAAA,GAAf,CAAjB;AACA,MAAI,CAAC7B,QAAL,EAAe,OAAOmB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wCAArB,CAAP;AACfF,MAAIE,IAAJ,CAASrB,QAAT;AACD,CAJD;;AAMAgB,QAAQc,cAAR,GAAyB,UAACZ,GAAD,EAAMC,GAAN,EAAc;AAAA,0BACnBpB,iBAAiBmB,IAAIa,IAArB,CADmB;AAAA,MAC7BC,KAD6B,qBAC7BA,KAD6B;;AAGrC,MAAIA,KAAJ,EAAW,OAAOb,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,MAAMC,OAAN,CAAc,CAAd,EAAiBC,OAAtC,CAAP;;AAEX,MAAMlC,WAAW;AACf0B,QAAIJ,2BAAUa,MAAV,GAAmB,CADR;AAEfjC,gBAAYgB,IAAIa,IAAJ,CAAS7B,UAFN;AAGfK,aAASW,IAAIa,IAAJ,CAASxB,OAHH;AAIfP,cAAUkB,IAAIa,IAAJ,CAAS/B,QAJJ;AAKfoC,aAAS,WALM;AAMf3B,YAAQS,IAAIa,IAAJ,CAAStB,MANF;AAOf4B,kBAAc;AAPC,GAAjB;;AAUAf,6BAAUgB,IAAV,CAAetC,QAAf;;AAEAmB,MAAIE,IAAJ,CAASrB,QAAT;AACD,CAlBD;;AAoBAgB,QAAQuB,cAAR,GAAyB,UAACrB,GAAD,EAAMC,GAAN,EAAc;;AAErC,MAAMnB,WAAWsB,2BAAUE,IAAV,CAAe;AAAA,WAAKC,EAAEC,EAAF,KAASC,SAAST,IAAIU,MAAJ,CAAWC,UAApB,CAAd;AAAA,GAAf,CAAjB;AACA,MAAI,CAAC7B,QAAL,EAAe,OAAOmB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wCAArB,CAAP;;AAHsB,wBAKnBR,eAAeK,IAAIa,IAAnB,CALmB;AAAA,MAK7BC,KAL6B,mBAK7BA,KAL6B;;AAOrC,MAAIA,KAAJ,EAAW,OAAOb,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,MAAMC,OAAN,CAAc,CAAd,EAAiBC,OAAtC,CAAP;;AAEX,MAAMM,SAAS;AACbd,QAAI1B,SAASqC,YAAT,CAAsBF,MAAtB,GAA+B,CADtB;AAEbrB,gBAAYI,IAAIa,IAAJ,CAASjB,UAFR;AAGbP,aAASW,IAAIa,IAAJ,CAASxB,OAHL;AAIbQ,YAAQG,IAAIa,IAAJ,CAAShB;AAJJ,GAAf;;AAOAf,WAASqC,YAAT,CAAsBC,IAAtB,CAA2BE,MAA3B;;AAEArB,MAAIE,IAAJ,CAASrB,QAAT;AACD,CAnBD","file":"questionsControllers.js","sourcesContent":["import Joi from 'joi';\n\nimport { questions } from '../models/questionsModels';\n\nfunction validateQuestion(question) {\n  const schema = {\n    questionBy: Joi.string().min(3).required(),\n    AddedOn: Joi.string().isoDate().required(),\n    question: Joi.string().min(5).required(),\n    Topics: Joi.array().items(Joi.string().required()),\n  };\n\n  return Joi.validate(question, schema);\n}\n\nfunction validateAnswer(question) {\n  const schema = {\n    answeredBy: Joi.string().min(3).required(),\n    AddedOn: Joi.string().isoDate().required(),\n    Answer: Joi.string().min(5).required(),\n  };\n\n  return Joi.validate(question, schema);\n}\n\n\nexports.getAllQuestions = (req, res) => {\n  res.status(200).send(questions);\n};\n\nexports.getQuestionById = (req, res) => {\n  const question = questions.find(g => g.id === parseInt(req.params.questionId));\n  if (!question) return res.status(404).send('There is no question with the given id');\n  res.send(question);\n};\n\nexports.createQuestion = (req, res) => {\n  const { error } = validateQuestion(req.body);\n\n  if (error) return res.status(400).send(error.details[0].message);\n\n  const question = {\n    id: questions.length + 1,\n    questionBy: req.body.questionBy,\n    AddedOn: req.body.AddedOn,\n    question: req.body.question,\n    answers: '0 answers',\n    Topics: req.body.Topics,\n    answersGiven: [],\n  };\n\n  questions.push(question);\n\n  res.send(question);\n};\n\nexports.answerQuestion = (req, res) => {\n\n  const question = questions.find(g => g.id === parseInt(req.params.questionId));\n  if (!question) return res.status(404).send('There is no question with the given id');\n\n  const { error } = validateAnswer(req.body);\n\n  if (error) return res.status(400).send(error.details[0].message);\n\n  const answer = {\n    id: question.answersGiven.length + 1,\n    answeredBy: req.body.answeredBy,\n    AddedOn: req.body.AddedOn,\n    Answer: req.body.Answer,\n  };\n\n  question.answersGiven.push(answer);\n\n  res.send(question);\n};\n"]}